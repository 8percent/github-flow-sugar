#!/bin/bash


# 설정으로 사용할 키

## required
BR_MASTER="git8.branch.master"
BR_DEVELOP="git8.branch.develop"
## optional
UTIL_TAG_DATE="git8.utils.date"

# 설정 기본값

MASTER_DEFAULT="master"
DEVELOP_DEFAULT="develop"
TAG_DATE_DEFAULT="true"

###### helpers

assert_repository() {
	# repo check
	if ! git rev-parse > /dev/null 2>&1
	then
		echo "should be git repo"
		exit 2
	fi
}

assert_initialized() {
	assert_repository

	for key in "$BR_MASTER" "$BR_DEVELOP"
	do
		branch=$(git config --get "$key" 2> /dev/null)
		if [ $? -ne 0 ]
		then
			echo "repository isn't fully initialized" >2
			exit 2
		fi

		if ! git rev-parse "$branch" -- > /dev/null 2>&1
		then
			echo "required branch doesn't exists: $key" >2
			exit 2
		fi
	done
}


######	function def

usage() {
	TEXT="\
git-8 (git-eightpercent)
에잇퍼센트 브랜치 관리용 도구입니다.

다음 명령어를 지원합니다: init, checkout
"
	echo "$TEXT"
}

help_init() {
	TEXT="\
init: 에잇퍼센트용 관리 도구를 설정합니다.

default	: 기본 설정을 로컬 저장소에 저장합니다.
-c	: 설정을 하나씩 맞출 수 있습니다.(개발중)
"
	echo "$TEXT"
}

init() {
	assert_repository

	# TODO: configure options
	master=$MASTER_DEFAULT
	develop=$DEVELOP_DEFAULT
	tag_date=$TAG_DATE_DEFAULT

	git config --local $BR_MASTER $master
	git config --local $BR_DEVELOP $develop
	git config --local $UTIL_TAG_DATE $tag_date

	if ! git rev-parse $master -- > /dev/null 2>&1
	then
		git branch $master
	fi

	if ! git rev-parse $develop -- > /dev/null 2>&1
	then
		git branch $develop
	fi

	git checkout $develop
}

help_checkout() {
	TEXT="\
checkout: 개발용 브랜치를 만들고 체크아웃합니다.

사용법: git 8 checkout FEATURE, 혹은 git 8 c FEATURE
기본설정으로 브랜치 이름 앞에 날짜를 붙입니다.
"
	echo "$TEXT"
}

checkout() {
	assert_initialized

	parent=$(git config --local --get $BR_DEVELOP)
	date_needed=$(git config --local --get $UTIL_TAG_DATE)

	if $date_needed
	then
		br_name="$(date +%y%m%d)_$1"
	else
		br_name="$1"
	fi

	if [ $(git rev-parse HEAD) != $(git rev-parse $parent) ]
	then
		git checkout $parent
	fi
	git checkout -b $br_name
}

help_push() {
	TEXT="\
push: push current branch to origin
shortcut for git push --set-upstream origin $br_name
"
	echo "$TEXT"
}

push() {
	echo "push"
}


####### main start #######

if [ $# -lt 1 ]
then
	usage
	exit 1
elif [[ $1 == -* ]]
then
	usage
	exit 1
fi

action=$1
shift

case "$action" in
"init")
	configure=false
	while getopts "hc" option
	do
		case $option in
		"h")
			help_init
			exit 0
		;;
		"c")
			configure=true
		;;
		*)
			echo "Unsupported option: $option" >2
			exit 2
		;;
		esac
		shift $((OPTIND-1))
	done
	# help_init
	init $configure
;;
"c" | "checkout")
	help_option=false
	while getopts "h" option
	do
		case $option in
		"h")
			help_option=true
		;;
		*)
			echo "Checkout doesn accept any option" >2
			exit 2
		;;
		esac
		shift $((OPTIND-1))
	done

	if $help_option
	then
		help_checkout
		exit 0
	fi

	if [ $# -lt 1 ]
	then
		help_checkout
	else
		checkout "$@"
	fi
;;
"p" | "push")
;;
"pr")
	echo "pr"
;;
"m" | "merge")
	echo "merge"
;;
"release")
	echo "release"
;;
*)
	echo "wrong action: $action"
;;
esac
